(function() {
  var Timer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Timer = (function() {
    var $timerLabel, callbacks, timer, timerId;

    $timerLabel = null;

    timerId = null;

    timer = 0;

    callbacks = null;

    function Timer(config) {
      this.save = __bind(this.save, this);
      this.cancel = __bind(this.cancel, this);
      this.launch = __bind(this.launch, this);
      this.display = __bind(this.display, this);
      this.count = __bind(this.count, this);
      config = $.extend({
        'value': 0,
        'timerLabelId': 'timer',
        'callbacks': {}
      }, config);
      this.timer = config.value;
      this.timerId = null;
      this.$timerLabel = $('#' + config.timerLabelId).first();
      this.callbacks = config.callbacks;
      this.display();
      this.launch();
      return this;
    }

    Timer.prototype.count = function() {
      this.timer++;
      this.display();
      if (this.callbacks[this.timer]) {
        if (typeof this.callbacks[this.timer] === 'function') {
          this.callbacks[this.timer].apply(this);
        }
        if ((typeof this.callbacks[this.timer] === 'object') && this.callbacks[this.timer].hasOwnProperty('execute')) {
          this.callbacks[this.timer].execute.apply(this, this.callbacks[this.timer].params);
        }
      }
      return this;
    };

    Timer.prototype.display = function() {
      var mins, secs;
      secs = this.timer % 60;
      if (secs < 10) {
        secs = '0' + secs;
      }
      mins = parseInt(this.timer / 60);
      if (mins < 10) {
        mins = '0' + mins;
      }
      this.$timerLabel.text(mins + ':' + secs);
      return this;
    };

    Timer.prototype.launch = function() {
      var _this = this;
      this.timerId = setInterval(function() {
        return _this.count();
      }, 1000);
      return this;
    };

    Timer.prototype.cancel = function() {
      clearInterval(this.timerId);
      this.timerId = null;
      localStorage.setItem('timer', 0);
      return this;
    };

    Timer.prototype.save = function() {
      localStorage.setItem('timer', this.timer);
      return this;
    };

    return Timer;

  })();

  $(function() {
    var __sounds__, __timer__;
    __sounds__ = {
      'alert': new buzz.sound('/sounds/tic-tac', {
        formats: ['mp3', 'ogg', 'wav']
      })
    };
    __timer__ = new Timer({
      timerLabelId: 'app-timer',
      value: localStorage.getItem('timer') || 0,
      callbacks: {
        60: {
          'params': [__sounds__],
          'execute': function(sounds) {
            return sounds.alert.play();
          }
        }
      }
    });
    return $('a').on({
      'click': function(e) {
        if ($(this).data('stop') === 'timer') {
          return __timer__.cancel();
        } else {
          return __timer__.save();
        }
      }
    });
  });

}).call(this);
