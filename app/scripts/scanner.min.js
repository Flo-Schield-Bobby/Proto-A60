(function() {
  var Scanner, qrcode,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Scanner = (function() {
    var canvasRootEl, constraints, context, data, errorCallback, successCallback, videoRootEl;

    videoRootEl = null;

    canvasRootEl = null;

    context = null;

    data = null;

    constraints = null;

    successCallback = null;

    errorCallback = null;

    function Scanner(config) {
      this.analyse = __bind(this.analyse, this);
      this.decode = __bind(this.decode, this);
      this.display = __bind(this.display, this);
      this.scan = __bind(this.scan, this);
      var _this = this;
      config = $.extend({
        'constraints': {
          'audio': false,
          'video': true
        },
        'successCallback': function() {},
        'errorCallback': function() {},
        'videoRootElId': '',
        'canvasRootElId': ''
      }, config);
      this.videoRootEl = document.getElementById(config.videoRootElId);
      this.constraints = config.constraints;
      this.successCallback = config.successCallback;
      this.errorCallback = config.errorCallback;
      this.canvasRootEl = document.getElementById(config.canvasRootElId);
      this.context = this.canvasRootEl.getContext('2d');
      this.context.clearRect(0, 0, this.canvasRootEl.width, this.canvasRootEl.height);
      this.data = this.context.getImageData(0, 0, this.canvasRootEl.width, this.canvasRootEl.height);
      qrcode.callback = function(data) {
        _this.analyse(data);
        return _this;
      };
      this.scan();
      return this;
    }

    Scanner.prototype.scan = function() {
      var _this = this;
      return navigator.getMedia(this.constraints, function(mediaStream) {
        _this.display(mediaStream);
        _this.successCallback.apply(_this, [mediaStream]);
        return setTimeout(function() {
          return _this.decode();
        }, 500);
      }, function(e) {
        return _this.errorCallback.apply();
      });
    };

    Scanner;

    Scanner.prototype.display = function(mediaStream) {
      this.videoRootEl.src = window.URL.createObjectURL(mediaStream);
      return this;
    };

    Scanner.prototype.decode = function() {
      var e,
        _this = this;
      this.context.drawImage(this.videoRootEl, 0, 0);
      try {
        qrcode.decode();
      } catch (_error) {
        e = _error;
        console.log(e);
        setTimeout(function() {
          return _this.decode();
        }, 500);
      }
      return this;
    };

    Scanner.prototype.analyse = function(data) {
      return this;
    };

    return Scanner;

  })();

  navigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

  qrcode = qrcode || {
    decode: function() {}
  };

  $(function() {
    var __scanner__;
    return __scanner__ = new Scanner({
      'videoRootElId': 'camera-screen',
      'canvasRootElId': 'qr-code-canvas',
      'constraints': {
        'video': true,
        'audio': false
      }
    });
  });

}).call(this);
